#ifndef __PPTX_CT_P_TLCOMMON_TIME_NODE_DATA_H__
#define __PPTX_CT_P_TLCOMMON_TIME_NODE_DATA_H__

#ifndef __PPTX_PRIVATE_INCLUDES__
#error "Please do not include this file directly"
#endif /* __PPTX_H__ */

#include <libxml/parser.h>
#include <private/pptx-common.h>

typedef struct pptx_ct_p_tltime_condition_list_s pptx_ct_p_tltime_condition_list;
typedef struct pptx_ct_p_tltime_condition_s pptx_ct_p_tltime_condition;
typedef struct pptx_ct_p_tliterate_data_s pptx_ct_p_tliterate_data;
typedef struct pptx_ct_p_time_node_list_s pptx_ct_p_time_node_list;
typedef enum pptx_st_tltime_node_preset_class_type_token_enum pptx_st_tltime_node_preset_class_type_token_enum;
typedef enum pptx_st_tltime_indefinite_token_enum pptx_st_tltime_indefinite_token_enum;
typedef enum pptx_st_tltime_node_restart_type_token_enum pptx_st_tltime_node_restart_type_token_enum;
typedef enum pptx_st_tltime_node_fill_type_token_enum pptx_st_tltime_node_fill_type_token_enum;
typedef enum pptx_st_tltime_node_sync_type_token_enum pptx_st_tltime_node_sync_type_token_enum;
typedef enum pptx_st_tltime_node_master_relation_token_enum pptx_st_tltime_node_master_relation_token_enum;
typedef enum pptx_st_tltime_node_type_token_enum pptx_st_tltime_node_type_token_enum;

typedef struct pptx_ct_p_tlcommon_time_node_data_s pptx_ct_p_tlcommon_time_node_data;
pptx_ct_p_tlcommon_time_node_data *pptx_ct_p_tlcommon_time_node_data_new(xmlNode *node);
void pptx_ct_p_tlcommon_time_node_data_free(pptx_ct_p_tlcommon_time_node_data *obj);
pptx_ct_p_tltime_condition_list *pptx_ct_p_tlcommon_time_node_data_get_st_cond_lst(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_ct_p_tltime_condition_list *pptx_ct_p_tlcommon_time_node_data_get_end_cond_lst(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_ct_p_tltime_condition *pptx_ct_p_tlcommon_time_node_data_get_end_sync(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_ct_p_tliterate_data *pptx_ct_p_tlcommon_time_node_data_get_iterate(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_ct_p_time_node_list *pptx_ct_p_tlcommon_time_node_data_get_child_tn_lst(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_ct_p_time_node_list *pptx_ct_p_tlcommon_time_node_data_get_sub_tn_lst(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_uint pptx_ct_p_tlcommon_time_node_data_get_id(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_int pptx_ct_p_tlcommon_time_node_data_get_preset_id(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_st_tltime_node_preset_class_type_token_enum pptx_ct_p_tlcommon_time_node_data_get_preset_class(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_int pptx_ct_p_tlcommon_time_node_data_get_preset_subtype(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_st_tltime_indefinite_token_enum pptx_ct_p_tlcommon_time_node_data_get_dur(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_st_tltime_indefinite_token_enum pptx_ct_p_tlcommon_time_node_data_get_repeat_count(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_st_tltime_indefinite_token_enum pptx_ct_p_tlcommon_time_node_data_get_repeat_dur(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_string pptx_ct_p_tlcommon_time_node_data_get_spd(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_string pptx_ct_p_tlcommon_time_node_data_get_accel(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_string pptx_ct_p_tlcommon_time_node_data_get_decel(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_bool pptx_ct_p_tlcommon_time_node_data_get_auto_rev(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_st_tltime_node_restart_type_token_enum pptx_ct_p_tlcommon_time_node_data_get_restart(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_st_tltime_node_fill_type_token_enum pptx_ct_p_tlcommon_time_node_data_get_fill(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_st_tltime_node_sync_type_token_enum pptx_ct_p_tlcommon_time_node_data_get_sync_behavior(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_string pptx_ct_p_tlcommon_time_node_data_get_tm_filter(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_string pptx_ct_p_tlcommon_time_node_data_get_evt_filter(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_bool pptx_ct_p_tlcommon_time_node_data_get_display(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_st_tltime_node_master_relation_token_enum pptx_ct_p_tlcommon_time_node_data_get_master_rel(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_int pptx_ct_p_tlcommon_time_node_data_get_bld_lvl(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_uint pptx_ct_p_tlcommon_time_node_data_get_grp_id(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_bool pptx_ct_p_tlcommon_time_node_data_get_after_effect(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_st_tltime_node_type_token_enum pptx_ct_p_tlcommon_time_node_data_get_node_type(const pptx_ct_p_tlcommon_time_node_data *const obj);
pptx_bool pptx_ct_p_tlcommon_time_node_data_get_node_ph(const pptx_ct_p_tlcommon_time_node_data *const obj);
int32_t pptx_ct_p_tlcommon_time_node_data_get_index(pptx_ct_p_tlcommon_time_node_data *obj);

#endif /* __PPTX_CT_P_TLCOMMON_TIME_NODE_DATA_H__ */
